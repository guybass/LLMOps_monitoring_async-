name: Collect Download Statistics

on:
  # Run daily at 00:00 UTC
  schedule:
    - cron: '0 0 * * *'

  # Allow manual trigger
  workflow_dispatch:
    inputs:
      days:
        description: 'Number of days to fetch (1-180)'
        required: false
        default: '30'

jobs:
  collect-stats:
    runs-on: ubuntu-latest

    permissions:
      contents: write  # Needed to commit stats files

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pypistats pandas requests

      - name: Create stats directory
        run: mkdir -p stats

      - name: Fetch download statistics
        run: |
          python scripts/fetch_download_stats.py \
            --output-dir ./stats \
            --days ${{ github.event.inputs.days || '30' }}

      - name: Generate README for stats
        run: |
          cat > stats/README.md << 'EOF'
          # Download Statistics

          This directory contains automated download statistics from PyPI for llamonitor-async.

          ## Files

          - `download_summary.json` - Latest summary statistics (updated daily)
          - `downloads_YYYY-MM-DD.json` - Full daily statistics snapshots
          - `downloads_YYYY-MM-DD.csv` - CSV format for analysis

          ## Automated Collection

          Statistics are automatically collected daily via GitHub Actions.
          See `.github/workflows/collect_download_stats.yml` for details.

          ## Manual Collection

          To manually collect statistics:

          ```bash
          pip install pypistats pandas
          python scripts/fetch_download_stats.py --days 30
          ```

          ## Visualization

          You can visualize this data using:
          - Excel/Google Sheets (import CSV files)
          - Python pandas/matplotlib
          - Grafana (import JSON files)
          - Any BI tool
          EOF

      - name: Commit and push statistics
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add stats/

          # Only commit if there are changes
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "📊 Update download statistics - $(date +'%Y-%m-%d')"
            git push
          fi

      - name: Create summary
        if: always()
        run: |
          echo "## 📊 Download Statistics Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f stats/download_summary.json ]; then
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            cat stats/download_summary.json >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Failed to generate statistics" >> $GITHUB_STEP_SUMMARY
          fi
